{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 52d38c810f8609957fd2","webpack:///./node_modules/jitsi-meet-logger/lib/index.js","webpack:///./react/features/base/util/uri.js","webpack:///./node_modules/jitsi-meet-logger/lib/Logger.js","webpack:///./modules/API/external/index.js","webpack:///./modules/API/external/external_api.js","webpack:///./node_modules/events/events.js","webpack:///./modules/API/constants.js","webpack:///./react/features/base/config/parseURLParams.js","webpack:///./modules/transport/PostMessageTransportBackend.js","webpack:///./modules/transport/Transport.js","webpack:///./modules/transport/constants.js","webpack:///./modules/transport/index.js","webpack:///./react/features/base/util/helpers.js","webpack:///./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack:///./react/features/base/util/httpUtils.js","webpack:///./node_modules/postis/src/index.js","webpack:///./modules/API/external/electronPopupsConfig.json"],"names":["root","factory","exports","module","define","amd","JitsiMeetExternalAPI","self","this","e","__webpack_require__","moduleId","installedModules","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","getLogger","id","transports","format","logger","push","setLogLevelById","level","length","setLevel","setLogLevel","_fixURIStringScheme","uri","regex","RegExp","URI_PROTOCOL_PATTERN","match","exec","protocol","toLowerCase","substring","lastIndex","startsWith","_objectToURLParamsArray","obj","arguments","params","key","encodeURIComponent","JSON","stringify","console","warn","parseStandardURIString","str","toString","_standardURIToString","replace","_URI_AUTHORITY_PATTERN","authority","userinfoEndIndex","indexOf","host","portBeginIndex","lastIndexOf","port","hostname","pathname","_URI_PATH_PATTERN","hashBeginIndex","search","hash","thiz","_ref2","urlObjectToString","url","scheme","endsWith","domain","_parseStandardURIStri","APP_LINK_SCHEME","contextRoot","room","roomName","jwt","_arr","_i","configName","urlParamsArray","urlParamsString","join","undefined","log","args","Array","slice","callerInfo","methodName","fileLocation","line","column","error","Error","stack","split","substr","globalTransports","concat","u","bind","apply","methods","keys","trace","debug","info","consoleTransport","transportIdx","splice","DEBUG","INFO","LOG","WARN","ERROR","changeParticipantNumber","APIInstance","number","_numberOfParticipants","parseSizeParam","value","parsedValue","String","__filename","ALWAYS_ON_TOP_FILENAMES","commands","avatarUrl","displayName","email","hangup","submitFeedback","toggleAudio","toggleChat","toggleFilmStrip","toggleShareScreen","toggleVideo","events","avatar-changed","audio-availability-changed","audio-mute-status-changed","display-name-change","email-change","feedback-submitted","incoming-message","outgoing-message","participant-joined","participant-left","video-ready-to-close","video-conference-joined","video-conference-left","video-availability-changed","video-mute-status-changed","screen-sharing-status-changed","_this","__proto__","getPrototypeOf","_len","_key","_parseArguments","firstArg","_typeof","_args","_slicedToArray","width","height","parentNode","configOverwrite","interfaceConfigOverwrite","noSSL","onload","_parseArguments$roomN","_parseArguments$width","_parseArguments$heigh","_parseArguments$paren","document","body","_parseArguments$confi","_parseArguments$inter","_parseArguments$noSSL","_parseArguments$jwt","_parseArguments$onloa","invitees","_parentNode","_url","options","__WEBPACK_IMPORTED_MODULE_1__react_features_base_util_uri__","a","_createIFrame","_transport","__WEBPACK_IMPORTED_MODULE_2__transport__","b","backend","postisOptions","scope","window","_frame","contentWindow","isArray","invite","_isLargeVideoVisible","_participants","_myUserID","_onStageParticipant","_setupListeners","__WEBPACK_IMPORTED_MODULE_0_events___default","frameName","createElement","allow","src","_setSize","setAttribute","style","border","appendChild","iframeWindow","baseURL","base","querySelector","href","_iframeWindow$locatio","location","map","filename","URL","iframe","getIFrame","getElementById","parsedHeight","parsedWidth","_this2","on","_ref","data","userID","avatarURL","formattedDisplayName","user","displayname","emit","isVisible","eventName","event","listener","listeners","addEventListener","dispose","removeAllListeners","removeChild","_len2","_key2","sendEvent","commandList","executeCommand","sendRequest","Promise","reject","TypeError","participantId","eventList","_this3","forEach","removeEventListener","resolve","__WEBPACK_IMPORTED_MODULE_3__electronPopupsConfig_json___default","EventEmitter","_events","_maxListeners","isFunction","arg","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","type","er","handler","len","err","context","addListener","newListener","warned","once","g","removeListener","fired","list","position","listenerCount","evlistener","emitter","API_ID","dontParse","paramStr","part","param","parse","decodeURIComponent","helpers","jitsi_meet_external_api_id","DEFAULT_POSTIS_OPTIONS","opener","parent","LEGACY_INCOMING_METHODS","LEGACY_OUTGOING_METHODS","POSTIS_METHOD_NAME","PostMessageTransportBackend","enableLegacyFormat","postis","src_default","Postis","_enableLegacyFormat","method","listen","_legacyMessageReceivedCallback","_receiveCallback","message","send","destroy","_sendLegacyMessage","callback","Transport","_listeners","Map","_requestID","_responseHandlers","_unprocessedMessages","Set","setBackend","_backend","delete","result","clear","_disposeBackend","listenersForEvent","isProcessed","size","add","set","request","setReceiveCallback","_onMessageReceived","__webpack_exports__","transport_Transport","transport_postisOptions","setExternalTransportBackend","externalTransportBackend","JitsiMeetJS","app","msg","onerror","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","prevMessage","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","readynessCheck","targetWindow","windowForEventListening","sendBuffer","listenBuffer","ready","listenersForMethod","listenBufferForMethod","j","opts","postMessage","clearInterval","readyCheckID","Date","Math","random","setInterval","google-auth","matchPatterns","target"],"mappings":"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","file":"external_api.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 52d38c810f8609957fd2","/* Copyright @ 2015 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require(\"./Logger\");\r\nvar LogCollector = require(\"./LogCollector\");\r\n\r\n/**\r\n * Definition of the log method\r\n * @name log_method\r\n * @function\r\n * @param {...*} log_args the arguments to be logged\r\n */\r\n/**\r\n * The logger's transport type definition.\r\n *\r\n * @typedef {object} LoggerTransport\r\n *\r\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\r\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\r\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\r\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\r\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\r\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\r\n */\r\n\r\n/**\r\n * Map with the created loggers with ID.\r\n */\r\nvar idLoggers = {};\r\n\r\n/**\r\n * Array with the loggers without id.\r\n */\r\nvar loggers = [];\r\n\r\n/**\r\n * Log level for the lbrary.\r\n */\r\nvar curLevel = Logger.levels.TRACE;\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Adds given {@link LoggerTransport} instance to the list of global\r\n     * transports which means that it'll be used by all {@link Logger}s\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    addGlobalTransport: function(transport) {\r\n        Logger.addGlobalTransport(transport);\r\n    },\r\n    /**\r\n     * Removes given {@link LoggerTransport} instance from the list of global\r\n     * transports\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    removeGlobalTransport: function(transport) {\r\n        Logger.removeGlobalTransport(transport);\r\n    },\r\n    /**\r\n     * Creates new logger.\r\n     * @arguments the same as Logger constructor\r\n     */\r\n    getLogger: function(id, transports, format) {\r\n        var logger = new Logger(curLevel, id, transports, format);\r\n        if(id) {\r\n            idLoggers[id] = idLoggers[id] || [];\r\n            idLoggers[id].push(logger);\r\n        } else {\r\n            loggers.push(logger);\r\n        }\r\n        return logger;\r\n    },\r\n    /**\r\n     * Changes the log level for the existing loggers by id.\r\n     * @param level the new log level.\r\n     * @param id if specified the level will be changed only for loggers with the\r\n     * same id. Otherwise the operation will affect all loggers that don't\r\n     * have id.\r\n     */\r\n    setLogLevelById: function(level, id) {\r\n        var l = id? (idLoggers[id] || []) : loggers;\r\n        for(var i = 0; i < l.length; i++) {\r\n            l[i].setLevel(level);\r\n        }\r\n    },\r\n    /**\r\n     * Changes the log level for all existing loggers.\r\n     * @param level the new log level.\r\n     */\r\n    setLogLevel: function (level) {\r\n        curLevel = level;\r\n        var i = 0;\r\n        for(; i < loggers.length; i++) {\r\n            loggers[i].setLevel(level);\r\n        }\r\n\r\n        for(var id in idLoggers) {\r\n            var l = idLoggers[id] || [];\r\n            for(i = 0; i < l.length; i++) {\r\n                l[i].setLevel(level);\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * The supported log levels.\r\n     */\r\n    levels: Logger.levels,\r\n    /**\r\n     * Exports the <tt>LogCollector</tt>.\r\n     */\r\n    LogCollector: LogCollector\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/index.js\n// module id = 0\n// module chunks = 0","// @flow\n\n/**\n * The app linking scheme.\n * TODO: This should be read from the manifest files later.\n */\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\n\n/**\n * A list of characters to be excluded/removed from the room component/segment\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\n * library utilized by jicofo.\n */\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\:\\\\?#\\\\[\\\\]@!$&\\'()*+,;=></\"]';\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * FIXME: The URL class exposed by JavaScript will not include the colon in\n * the protocol field. Also in other places (at the time of this writing:\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\n * the double dots, so things are inconsistent.\n *\n * @type {string}\n */\nexport const URI_PROTOCOL_PATTERN = '([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Excludes/removes certain characters from a specific room (name) which are\n * incompatible with Jitsi Meet on the client and/or server sides.\n *\n * @param {?string} room - The room (name) to fix.\n * @private\n * @returns {?string}\n */\nfunction _fixRoom(room: ?string) {\n    return room\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\n        : room;\n}\n\n/**\n * Fixes the hier-part of a specific URI (string) so that the URI is well-known.\n * For example, certain Jitsi Meet deployments are not conventional but it is\n * possible to translate their URLs into conventional.\n *\n * @param {string} uri - The URI (string) to fix the hier-part of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringHierPart(uri) {\n    // Rewrite the specified URL in order to handle special cases such as\n    // hipchat.com and enso.me which do not follow the common pattern of most\n    // Jitsi Meet deployments.\n\n    // hipchat.com\n    let regex\n        = new RegExp(\n            `^${URI_PROTOCOL_PATTERN}//hipchat\\\\.com/video/call/`,\n            'gi');\n    let match: Array<string> | null = regex.exec(uri);\n\n    if (!match) {\n        // enso.me\n        regex\n            = new RegExp(\n                `^${URI_PROTOCOL_PATTERN}//enso\\\\.me/(?:call|meeting)/`,\n                'gi');\n        match = regex.exec(uri);\n    }\n    if (match) {\n        /* eslint-disable no-param-reassign, prefer-template */\n\n        uri\n            = match[1] /* protocol */\n                + '//enso.hipchat.me/'\n                + uri.substring(regex.lastIndex); /* room (name) */\n\n        /* eslint-enable no-param-reassign, prefer-template */\n    }\n\n    return uri;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri: string) {\n    const regex = new RegExp(`^${URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match: Array<string> | null = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return (\n        contextRootEndIndex === -1\n            ? '/'\n            : pathname.substring(0, contextRootEndIndex + 1));\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        } catch (e) {\n            console.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str: string) {\n    /* eslint-disable no-param-reassign */\n\n    const obj: Object = {\n        toString: _standardURIToString\n    };\n\n    let regex;\n    let match: Array<string> | null;\n\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\n    // Usually, a browser will have already encoded any whitespace. In order to\n    // avoid potential later problems related to whitespace in URI, strip any\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\n    // whitespace so the stripping is deemed safe.\n    str = str.replace(/\\s/g, '');\n\n    // protocol\n    regex = new RegExp(`^${URI_PROTOCOL_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority: string = match[1].substring(/* // */ 2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n\n    let pathname: ?string;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     room: (string|undefined)\n * }}\n */\nexport function parseURIString(uri: ?string) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    const obj\n        = parseStandardURIString(\n            _fixURIStringHierPart(_fixURIStringScheme(uri)));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component/segment of pathname.\n    const { pathname } = obj;\n\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\n    // on the client and/or server sides still don't support certain characters.\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\n\n    if (room) {\n        const fixedRoom = _fixRoom(room);\n\n        if (fixedRoom !== room) {\n            room = fixedRoom;\n\n            // XXX Drive fixedRoom into pathname (because room is derived from\n            // pathname).\n            obj.pathname\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\n        }\n    }\n    obj.room = room;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz: ?Object) {\n    // eslint-disable-next-line no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {Object|string} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj: ?(Object | string)): ?string {\n    let str;\n\n    switch (typeof obj) {\n    case 'object':\n        if (obj) {\n            if (obj instanceof URL) {\n                str = obj.href;\n            } else {\n                str = urlObjectToString(obj);\n            }\n        }\n        break;\n\n    case 'string':\n        str = String(obj);\n        break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o: Object): ?string {\n    const url = parseStandardURIString(_fixURIStringScheme(o.url || ''));\n\n    // protocol\n    if (!url.protocol) {\n        let protocol: ?string = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    let { pathname } = url;\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain: ?string = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port }\n                = parseStandardURIString(\n\n                    // XXX The value of domain in supposed to be host/hostname\n                    // and, optionally, pathname. Make sure it is not taken for\n                    // a pathname only.\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\n\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n\n    if (room\n            && (url.pathname.endsWith('/')\n                || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    const { jwt } = o;\n\n    if (jwt) {\n        let { search } = url;\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = `?${search}`);\n            search.length === 1 || (search += '&');\n            search += `jwt=${jwt}`;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    let { hash } = url;\n\n    for (const configName of [ 'config', 'interfaceConfig' ]) {\n        const urlParamsArray\n            = _objectToURLParamsArray(\n                o[`${configName}Overwrite`]\n                    || o[configName]\n                    || o[`${configName}Override`]);\n\n        if (urlParamsArray.length) {\n            let urlParamsString\n                = `${configName}.${urlParamsArray.join(`&${configName}.`)}`;\n\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/uri.js","/* Copyright @ 2015 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Ordered log levels.\r\n */\r\nvar levels = {\r\n    \"trace\": 0,\r\n    \"debug\": 1,\r\n    \"info\": 2,\r\n    \"log\": 3,\r\n    \"warn\": 4,\r\n    \"error\": 5\r\n};\r\n\r\n/**\r\n * The default transport - console\r\n * @type LoggerTransport\r\n */\r\nLogger.consoleTransport = console;\r\n\r\n/**\r\n * The array which stores currently registered global transports.\r\n * @type {[LoggerTransport]}\r\n */\r\nvar globalTransports = [ Logger.consoleTransport ];\r\n\r\n/**\r\n * Adds given {@link LoggerTransport} instance to the list of global\r\n * transports which means that it'll be used by all {@link Logger}s\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.addGlobalTransport = function(transport) {\r\n    if (globalTransports.indexOf(transport) === -1) {\r\n        globalTransports.push(transport);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes given {@link LoggerTransport} instance from the list of global\r\n * transports\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.removeGlobalTransport = function(transport) {\r\n    var transportIdx = globalTransports.indexOf(transport);\r\n    if (transportIdx !== -1) {\r\n        globalTransports.splice(transportIdx, 1);\r\n    }\r\n};\r\n\r\n/**\r\n * Parses Error's object stack trace and extracts information about the last\r\n * caller before the log method was called.\r\n * @returns JS object with info about the caller - method name, file location,\r\n * line and column.\r\n */\r\nfunction getCallerInfo() {\r\n    var callerInfo = {\r\n        methodName: \"\",\r\n        fileLocation: \"\",\r\n        line: null,\r\n        column: null\r\n    };\r\n    //gets the part of the stack without the logger wrappers\r\n    var error = new Error();\r\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\r\n    if(!stack || stack.length < 1) {\r\n        return callerInfo;\r\n    }\r\n    var m = null;\r\n    if(stack[3]) {\r\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\r\n    }\r\n    if(!m || m.length <= 4) {\r\n        //Firefox && Safari\r\n        if(stack[2].indexOf(\"log@\") === 0){\r\n            //Safari\r\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\r\n        } else {\r\n            //Firefox\r\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\r\n        }\r\n        return callerInfo;\r\n    }\r\n\r\n    callerInfo.methodName = m[1];\r\n    callerInfo.fileLocation = m[2];\r\n    callerInfo.line = m[3];\r\n    callerInfo.column = m[4];\r\n    return callerInfo;\r\n}\r\n\r\n/**\r\n * Logs messages using the transports and level from the logger.\r\n * @param logger a logger instance.\r\n * @param level the log level of the message. See the levels variable.\r\n * @param arguments array with arguments that will be logged.\r\n */\r\nfunction log() {\r\n    var logger = arguments[0], level = arguments[1],\r\n        args = Array.prototype.slice.call(arguments, 2);\r\n    if(levels[level] < logger.level) {\r\n        return;\r\n    }\r\n\r\n    var callerInfo = getCallerInfo();\r\n    var transports = globalTransports.concat(logger.transports);\r\n    for(var i = 0; i < transports.length; i++) {\r\n        var t = transports[i];\r\n        var l = t[level];\r\n        if(l && typeof(l) === \"function\") {\r\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\r\n                .apply(t, args);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * Constructs new logger object.\r\n * @param level the logging level for the new logger\r\n * @param id optional identifier for the logger instance.\r\n * @param {LoggerTransport} transports optional list of handlers(objects) for\r\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\r\n * @param format optional (NOT implemented) string.\r\n */\r\nfunction Logger(level, id, transports, format) {\r\n    this.id = id;\r\n    this.format = format;\r\n    this.transports = transports;\r\n    if(!this.transports) {\r\n        this.transports = [];\r\n    }\r\n    this.level = levels[level];\r\n    var methods = Object.keys(levels);\r\n    for(var i = 0; i < methods.length; i++){\r\n        this[methods[i]] =\r\n            log.bind(null, this, methods[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the log level for the logger.\r\n * @param level the new log level.\r\n */\r\nLogger.prototype.setLevel = function (level) {\r\n    this.level = levels[level];\r\n};\r\nmodule.exports = Logger;\r\n\r\n/**\r\n * Enum for the supported log levels.\r\n */\r\nLogger.levels = {\r\n    TRACE: \"trace\",\r\n    DEBUG: \"debug\",\r\n    INFO: \"info\",\r\n    LOG: \"log\",\r\n    WARN: \"warn\",\r\n    ERROR: \"error\"\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/Logger.js\n// module id = 2\n// module chunks = 0","// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\n// external API (a.k.a. JitsiMeetExternalAPI).\nmodule.exports = require('./external_api').default;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/index.js","import EventEmitter from 'events';\n\nimport { urlObjectToString } from '../../../react/features/base/util/uri';\nimport {\n    PostMessageTransportBackend,\n    Transport\n} from '../../transport';\n\nimport electronPopupsConfig from './electronPopupsConfig.json';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst ALWAYS_ON_TOP_FILENAMES = [\n    'css/all.css', 'libs/alwaysontop.min.js'\n];\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nconst commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    submitFeedback: 'submit-feedback',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nconst events = {\n    'avatar-changed': 'avatarChanged',\n    'audio-availability-changed': 'audioAvailabilityChanged',\n    'audio-mute-status-changed': 'audioMuteStatusChanged',\n    'display-name-change': 'displayNameChange',\n    'email-change': 'emailChange',\n    'feedback-submitted': 'feedbackSubmitted',\n    'incoming-message': 'incomingMessage',\n    'outgoing-message': 'outgoingMessage',\n    'participant-joined': 'participantJoined',\n    'participant-left': 'participantLeft',\n    'video-ready-to-close': 'readyToClose',\n    'video-conference-joined': 'videoConferenceJoined',\n    'video-conference-left': 'videoConferenceLeft',\n    'video-availability-changed': 'videoAvailabilityChanged',\n    'video-mute-status-changed': 'videoMuteStatusChanged',\n    'screen-sharing-status-changed': 'screenSharingStatusChanged'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nlet id = 0;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance._numberOfParticipants += number;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSSL] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain, options = {}) {\n    return urlObjectToString({\n        ...options,\n        url:\n            `${options.noSSL ? 'http' : 'https'}://${\n                domain}/#jitsi_meet_external_api_id=${id}`\n    });\n}\n\n/**\n * Parses the arguments passed to the constructor. If the old format is used\n * the function translates the arguments to the new format.\n *\n * @param {Array} args - The arguments to be parsed.\n * @returns {Object} JS object with properties.\n */\nfunction parseArguments(args) {\n    if (!args.length) {\n        return {};\n    }\n\n    const firstArg = args[0];\n\n    switch (typeof firstArg) {\n    case 'string': // old arguments format\n    case undefined: // eslint-disable-line no-case-declarations\n    // not sure which format but we are trying to parse the old\n    // format because if the new format is used everything will be undefined\n    // anyway.\n        const [\n            roomName,\n            width,\n            height,\n            parentNode,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            noSSL,\n            jwt,\n            onload\n        ] = args;\n\n        return {\n            roomName,\n            width,\n            height,\n            parentNode,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            noSSL,\n            jwt,\n            onload\n        };\n    case 'object': // new arguments format\n        return args[0];\n    default:\n        throw new Error('Can\\'t parse the arguments!');\n    }\n}\n\n/**\n * Compute valid values for height and width. If a number is specified it's\n * treated as pixel units. If the value is expressed in px, em, pt or\n * percentage, it's used as is.\n *\n * @param {any} value - The value to be parsed.\n * @returns {string|undefined} The parsed value that can be used for setting\n * sizes through the style property. If invalid value is passed the method\n * retuns undefined.\n */\nfunction parseSizeParam(value) {\n    let parsedValue;\n\n    // This regex parses values of the form 100px, 100em, 100pt or 100%.\n    // Values like 100 or 100px are handled outside of the regex, and\n    // invalid values will be ignored and the minimum will be used.\n    const re = /([0-9]*\\.?[0-9]+)(em|pt|px|%)$/;\n\n    if (typeof value === 'string' && String(value).match(re) !== null) {\n        parsedValue = value;\n    } else if (typeof value === 'number') {\n        parsedValue = `${value}px`;\n    }\n\n    return parsedValue;\n}\n\n\n/**\n * The IFrame API interface class.\n */\nexport default class JitsiMeetExternalAPI extends EventEmitter {\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {Object} [options] - Optional arguments.\n     * @param {string} [options.roomName] - The name of the room to join.\n     * @param {number|string} [options.width] - Width of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} [options.height] - Height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {DOMElement} [options.parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [options.configOverwrite] - Object containing\n     * configuration options defined in config.js to be overridden.\n     * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [options.noSSL] - If the value is true https won't be\n     * used.\n     * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     * @param {string} [options.onload] - The onload function that will listen\n     * for iframe onload event.\n     * @param {Array<Object>} [options.invitees] - Array of objects containing\n     * information about new participants that will be invited in the call.\n     */\n    constructor(domain, ...args) {\n        super();\n        const {\n            roomName = '',\n            width = '100%',\n            height = '100%',\n            parentNode = document.body,\n            configOverwrite = {},\n            interfaceConfigOverwrite = {},\n            noSSL = false,\n            jwt = undefined,\n            onload = undefined,\n            invitees\n        } = parseArguments(args);\n\n        this._parentNode = parentNode;\n        this._url = generateURL(domain, {\n            configOverwrite,\n            interfaceConfigOverwrite,\n            jwt,\n            noSSL,\n            roomName\n        });\n        this._createIFrame(height, width, onload);\n        this._transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                postisOptions: {\n                    scope: `jitsi_meet_external_api_${id}`,\n                    window: this._frame.contentWindow\n                }\n            })\n        });\n        if (Array.isArray(invitees) && invitees.length > 0) {\n            this.invite(invitees);\n        }\n        this._isLargeVideoVisible = true;\n        this._numberOfParticipants = 0;\n        this._participants = {};\n        this._myUserID = undefined;\n        this._onStageParticipant = undefined;\n        this._setupListeners();\n        id++;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} width - The with of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {Function} onload - The function that will listen\n     * for onload event.\n     * @returns {void}\n     *\n     * @private\n     */\n    _createIFrame(height, width, onload) {\n        const frameName = `jitsiConferenceFrame${id}`;\n\n        this._frame = document.createElement('iframe');\n        this._frame.allow = 'camera; microphone';\n        this._frame.src = this._url;\n        this._frame.name = frameName;\n        this._frame.id = frameName;\n        this._setSize(height, width);\n        this._frame.setAttribute('allowFullScreen', 'true');\n        this._frame.style.border = 0;\n\n        if (onload) {\n            // waits for iframe resources to load\n            // and fires event when it is done\n            this._frame.onload = onload;\n        }\n\n        this._frame = this._parentNode.appendChild(this._frame);\n    }\n\n    /**\n     * Returns arrays with the all resources for the always on top feature.\n     *\n     * @returns {Array<string>}\n     */\n    _getAlwaysOnTopResources() {\n        const iframeWindow = this._frame.contentWindow;\n        const iframeDocument = iframeWindow.document;\n        let baseURL = '';\n        const base = iframeDocument.querySelector('base');\n\n        if (base && base.href) {\n            baseURL = base.href;\n        } else {\n            const { protocol, host } = iframeWindow.location;\n\n            baseURL = `${protocol}//${host}`;\n        }\n\n        return ALWAYS_ON_TOP_FILENAMES.map(\n            filename => (new URL(filename, baseURL)).href\n        );\n    }\n\n    /**\n     * Returns the id of the on stage participant.\n     *\n     * @returns {string} - The id of the on stage participant.\n     */\n    _getOnStageParticipant() {\n        return this._onStageParticipant;\n    }\n\n\n    /**\n     * Getter for the large video element in Jitsi Meet.\n     *\n     * @returns {HTMLElement|undefined} - The large video.\n     */\n    _getLargeVideo() {\n        const iframe = this.getIFrame();\n\n        if (!this._isLargeVideoVisible\n                || !iframe\n                || !iframe.contentWindow\n                || !iframe.contentWindow.document) {\n            return;\n        }\n\n        return iframe.contentWindow.document.getElementById('largeVideo');\n    }\n\n    /**\n     * Sets the size of the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe.\n     * @param {number|string} width - The with of the iframe.\n     * @returns {void}\n     *\n     * @private\n     */\n    _setSize(height, width) {\n        const parsedHeight = parseSizeParam(height);\n        const parsedWidth = parseSizeParam(width);\n\n        if (parsedHeight !== undefined) {\n            this._frame.style.height = parsedHeight;\n        }\n\n        if (parsedWidth !== undefined) {\n            this._frame.style.width = parsedWidth;\n        }\n    }\n\n    /**\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\n     *\n     * @returns {void}\n     *\n     * @private\n     */\n    _setupListeners() {\n        this._transport.on('event', ({ name, ...data }) => {\n            const userID = data.id;\n\n            switch (name) {\n            case 'video-conference-joined':\n                this._myUserID = userID;\n                this._participants[userID] = {\n                    avatarURL: data.avatarURL\n                };\n\n            // eslint-disable-next-line no-fallthrough\n            case 'participant-joined': {\n                this._participants[userID] = this._participants[userID] || {};\n                this._participants[userID].displayName = data.displayName;\n                this._participants[userID].formattedDisplayName\n                    = data.formattedDisplayName;\n                changeParticipantNumber(this, 1);\n                break;\n            }\n            case 'participant-left':\n                changeParticipantNumber(this, -1);\n                delete this._participants[userID];\n                break;\n            case 'display-name-change': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.displayName = data.displayname;\n                    user.formattedDisplayName = data.formattedDisplayName;\n                }\n                break;\n            }\n            case 'email-change': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.email = data.email;\n                }\n                break;\n            }\n            case 'avatar-changed': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.avatarURL = data.avatarURL;\n                }\n                break;\n            }\n            case 'on-stage-participant-changed':\n                this._onStageParticipant = userID;\n                this.emit('largeVideoChanged');\n                break;\n            case 'large-video-visibility-changed':\n                this._isLargeVideoVisible = data.isVisible;\n                this.emit('largeVideoChanged');\n                break;\n            case 'video-conference-left':\n                changeParticipantNumber(this, -1);\n                delete this._participants[this._myUserID];\n                break;\n            }\n\n            const eventName = events[name];\n\n            if (eventName) {\n                this.emit(eventName, data);\n\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Adds event listener to Meet Jitsi.\n     *\n     * @param {string} event - The name of the event.\n     * @param {Function} listener - The listener.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListener(event, listener) {\n        this.on(event, listener);\n    }\n\n    /**\n     * Adds event listeners to Meet Jitsi.\n     *\n     * @param {Object} listeners - The object key should be the name of\n     * the event and value - the listener.\n     * Currently we support the following\n     * events:\n     * incomingMessage - receives event notifications about incoming\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'from': from,//JID of the user that sent the message\n     *  'nick': nick,//the nickname of the user that sent the message\n     *  'message': txt//the text of the message\n     * }}\n     * outgoingMessage - receives event notifications about outgoing\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'message': txt//the text of the message\n     * }}\n     * displayNameChanged - receives event notifications about display name\n     * change. The listener will receive object with the following structure:\n     * {{\n     * jid: jid,//the JID of the participant that changed his display name\n     * displayname: displayName //the new display name\n     * }}\n     * participantJoined - receives event notifications about new participant.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * participantLeft - receives event notifications about the participant that\n     * left the room.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * video-conference-joined - receives event notifications about the local\n     * user has successfully joined the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * video-conference-left - receives event notifications about the local user\n     * has left the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * screenSharingStatusChanged - receives event notifications about\n     * turning on/off the local user screen sharing.\n     * The listener will receive object with the following structure:\n     * {{\n     * on: on //whether screen sharing is on\n     * }}\n     * readyToClose - all hangup operations are completed and Jitsi Meet is\n     * ready to be disposed.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListeners(listeners) {\n        for (const event in listeners) { // eslint-disable-line guard-for-in\n            this.addEventListener(event, listeners[event]);\n        }\n    }\n\n    /**\n     * Removes the listeners and removes the Jitsi Meet frame.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._transport.dispose();\n        this.removeAllListeners();\n        if (this._frame) {\n            this._frame.parentNode.removeChild(this._frame);\n        }\n    }\n\n    /**\n     * Executes command. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio with no arguments.\n     * toggleVideo - mutes / unmutes video with no arguments.\n     * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n     * If the command doesn't require any arguments the parameter should be set\n     * to empty array or it may be omitted.\n     *\n     * @param {string} name - The name of the command.\n     * @returns {void}\n     */\n    executeCommand(name, ...args) {\n        if (!(name in commands)) {\n            logger.error('Not supported command name.');\n\n            return;\n        }\n        this._transport.sendEvent({\n            data: args,\n            name: commands[name]\n        });\n    }\n\n    /**\n     * Executes commands. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio. no arguments\n     * toggleVideo - mutes / unmutes video. no arguments\n     * toggleFilmStrip - hides / shows the filmstrip. no arguments\n     * toggleChat - hides / shows chat. no arguments.\n     * toggleShareScreen - starts / stops screen sharing. no arguments.\n     *\n     * @param {Object} commandList - The object with commands to be executed.\n     * The keys of the object are the commands that will be executed and the\n     * values are the arguments for the command.\n     * @returns {void}\n     */\n    executeCommands(commandList) {\n        for (const key in commandList) { // eslint-disable-line guard-for-in\n            this.executeCommand(key, commandList[key]);\n        }\n    }\n\n    /**\n     * Check if the audio is available.\n     *\n     * @returns {Promise} - Resolves with true if the audio available, with\n     * false if not and rejects on failure.\n     */\n    isAudioAvailable() {\n        return this._transport.sendRequest({\n            name: 'is-audio-available'\n        });\n    }\n\n    /**\n     * Invite people to the call.\n     *\n     * @param {Array<Object>} invitees - The invitees.\n     * @returns {Promise} - Resolves on success and rejects on failure.\n     */\n    invite(invitees) {\n        if (!Array.isArray(invitees) || invitees.length === 0) {\n            return Promise.reject(new TypeError('Invalid Argument'));\n        }\n\n        return this._transport.sendRequest({\n            name: 'invite',\n            invitees\n        });\n    }\n\n    /**\n     * Returns the audio mute status.\n     *\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\n     * failure.\n     */\n    isAudioMuted() {\n        return this._transport.sendRequest({\n            name: 'is-audio-muted'\n        });\n    }\n\n    /**\n     * Returns the avatar URL of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The avatar URL.\n     */\n    getAvatarURL(participantId) {\n        const { avatarURL } = this._participants[participantId] || {};\n\n        return avatarURL;\n    }\n\n    /**\n     * Returns the display name of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The display name.\n     */\n    getDisplayName(participantId) {\n        const { displayName } = this._participants[participantId] || {};\n\n        return displayName;\n    }\n\n    /**\n     * Returns the email of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The email.\n     */\n    getEmail(participantId) {\n        const { email } = this._participants[participantId] || {};\n\n        return email;\n    }\n\n    /**\n     * Returns the formatted display name of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The formatted display name.\n     */\n    _getFormattedDisplayName(participantId) {\n        const { formattedDisplayName }\n            = this._participants[participantId] || {};\n\n        return formattedDisplayName;\n    }\n\n    /**\n     * Returns the iframe that loads Jitsi Meet.\n     *\n     * @returns {HTMLElement} The iframe.\n     */\n    getIFrame() {\n        return this._frame;\n    }\n\n    /**\n     * Returns the number of participants in the conference. The local\n     * participant is included.\n     *\n     * @returns {int} The number of participants in the conference.\n     */\n    getNumberOfParticipants() {\n        return this._numberOfParticipants;\n    }\n\n    /**\n     * Check if the video is available.\n     *\n     * @returns {Promise} - Resolves with true if the video available, with\n     * false if not and rejects on failure.\n     */\n    isVideoAvailable() {\n        return this._transport.sendRequest({\n            name: 'is-video-available'\n        });\n    }\n\n    /**\n     * Returns the audio mute status.\n     *\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\n     * failure.\n     */\n    isVideoMuted() {\n        return this._transport.sendRequest({\n            name: 'is-video-muted'\n        });\n    }\n\n    /**\n     * Removes event listener.\n     *\n     * @param {string} event - The name of the event.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListener(event) {\n        this.removeAllListeners(event);\n    }\n\n    /**\n     * Removes event listeners.\n     *\n     * @param {Array<string>} eventList - Array with the names of the events.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListeners(eventList) {\n        eventList.forEach(event => this.removeEventListener(event));\n    }\n\n    /**\n     * Returns the configuration for electron for the windows that are open\n     * from Jitsi Meet.\n     *\n     * @returns {Promise<Object>}\n     *\n     * NOTE: For internal use only.\n     */\n    _getElectronPopupsConfig() {\n        return Promise.resolve(electronPopupsConfig);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/external_api.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 5\n// module chunks = 0","// XXX The function parseURLParams is exported by the feature base/config (as\n// defined in the terminology of react/). However, this file is (very likely)\n// bundled in external_api in addition to app.bundle and, consequently, it is\n// best to import as little as possible here (rather than the whole feature\n// base/config) in order to minimize the amount of source code bundled into\n// multiple bundles.\nimport parseURLParams from '../../react/features/base/config/parseURLParams';\n\n/**\n * JitsiMeetExternalAPI id - unique for a webpage.\n */\nexport const API_ID\n    = parseURLParams(window.location).jitsi_meet_external_api_id;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/constants.js","/* @flow */\n\nimport { reportError } from '../util';\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value\n                    = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            reportError(\n                e, `Failed to parse URL parameter value: ${String(value)}`);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/config/parseURLParams.js","import Postis from 'postis';\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nconst DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The list of methods of incoming postis messages that we have to support for\n * backward compatibility for the users that are directly sending messages to\n * Jitsi Meet (without using external_api.js)\n *\n * @type {string[]}\n */\nconst LEGACY_INCOMING_METHODS = [\n    'avatar-url',\n    'display-name',\n    'email',\n    'toggle-audio',\n    'toggle-chat',\n    'toggle-film-strip',\n    'toggle-share-screen',\n    'toggle-video',\n    'video-hangup'\n];\n\n/**\n * The list of methods of outgoing postis messages that we have to support for\n * backward compatibility for the users that are directly listening to the\n * postis messages send by Jitsi Meet(without using external_api.js).\n *\n * @type {string[]}\n */\nconst LEGACY_OUTGOING_METHODS = [\n    'display-name-change',\n    'incoming-message',\n    'outgoing-message',\n    'participant-joined',\n    'participant-left',\n    'video-conference-joined',\n    'video-conference-left',\n    'video-ready-to-close'\n];\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nconst POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\nexport default class PostMessageTransportBackend {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    constructor({ enableLegacyFormat, postisOptions } = {}) {\n        // eslint-disable-next-line new-cap\n        this.postis = Postis({\n            ...DEFAULT_POSTIS_OPTIONS,\n            ...postisOptions\n        });\n\n        /**\n         * If true PostMessageTransportBackend will process and send messages\n         * using the legacy format and in the same time the current format.\n         * Otherwise all messages (outgoing and incoming) that are using the\n         * legacy format will be ignored.\n         *\n         * @type {boolean}\n         */\n        this._enableLegacyFormat = enableLegacyFormat;\n\n        if (this._enableLegacyFormat) {\n            // backward compatibility\n            LEGACY_INCOMING_METHODS.forEach(method =>\n                this.postis.listen(\n                    method,\n                    params =>\n                        this._legacyMessageReceivedCallback(method, params)\n                )\n            );\n        }\n\n        this._receiveCallback = () => {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(\n            POSTIS_METHOD_NAME,\n            message => this._receiveCallback(message));\n    }\n\n    /**\n     * Handles incoming legacy postis messages.\n     *\n     * @param {string} method - The method property from the postis message.\n     * @param {Any} params - The params property from the postis message.\n     * @returns {void}\n     */\n    _legacyMessageReceivedCallback(method, params = {}) {\n        this._receiveCallback({\n            data: {\n                name: method,\n                data: params\n            }\n        });\n    }\n\n    /**\n     * Sends the passed message via postis using the old format.\n     *\n     * @param {Object} legacyMessage - The message to be sent.\n     * @returns {void}\n     */\n    _sendLegacyMessage({ name, ...data }) {\n        if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n            this.postis.send({\n                method: name,\n                params: data\n            });\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this.postis.destroy();\n    }\n\n    /**\n     * Sends the passed message.\n     *\n     * @param {Object} message - The message to be sent.\n     * @returns {void}\n     */\n    send(message) {\n        this.postis.send({\n            method: POSTIS_METHOD_NAME,\n            params: message\n        });\n\n        if (this._enableLegacyFormat) {\n            // For the legacy use case we don't need any new fields defined in\n            // Transport class. That's why we are passing only the original\n            // object passed by the consumer of the Transport class which is\n            // message.data.\n            this._sendLegacyMessage(message.data || {});\n        }\n    }\n\n    /**\n     * Sets the callback for receiving data.\n     *\n     * @param {Function} callback - The new callback.\n     * @returns {void}\n     */\n    setReceiveCallback(callback) {\n        this._receiveCallback = callback;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/PostMessageTransportBackend.js","import {\n    MESSAGE_TYPE_EVENT,\n    MESSAGE_TYPE_REQUEST,\n    MESSAGE_TYPE_RESPONSE\n} from './constants';\n\n/**\n * Stores the currnet transport backend that have to be used. Also implements\n * request/response mechanism.\n */\nexport default class Transport {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    constructor({ backend } = {}) {\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n    _disposeBackend() {\n        if (this._backend) {\n            this._backend.dispose();\n            this._backend = null;\n        }\n    }\n\n    /**\n     * Handles incoming messages from the transport backend.\n     *\n     * @param {Object} message - The message.\n     * @returns {void}\n     */\n    _onMessageReceived(message) {\n        if (message.type === MESSAGE_TYPE_RESPONSE) {\n            const handler = this._responseHandlers.get(message.id);\n\n            if (handler) {\n                handler(message);\n                this._responseHandlers.delete(message.id);\n            }\n        } else if (message.type === MESSAGE_TYPE_REQUEST) {\n            this.emit('request', message.data, (result, error) => {\n                this._backend.send({\n                    type: MESSAGE_TYPE_RESPONSE,\n                    error,\n                    id: message.id,\n                    result\n                });\n            });\n        } else {\n            this.emit('event', message.data);\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._responseHandlers.clear();\n        this._unprocessedMessages.clear();\n        this.removeAllListeners();\n        this._disposeBackend();\n    }\n\n    /**\n     * Calls each of the listeners registered for the event named eventName, in\n     * the order they were registered, passing the supplied arguments to each.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @returns {boolean} True if the event has been processed by any listener,\n     * false otherwise.\n     */\n    emit(eventName, ...args) {\n        const listenersForEvent = this._listeners.get(eventName);\n        let isProcessed = false;\n\n        if (listenersForEvent && listenersForEvent.size) {\n            listenersForEvent.forEach(listener => {\n                isProcessed = listener(...args) || isProcessed;\n            });\n        }\n\n        if (!isProcessed) {\n            this._unprocessedMessages.add(args);\n        }\n\n        return isProcessed;\n    }\n\n    /**\n     * Adds the listener function to the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be added.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    on(eventName, listener) {\n        let listenersForEvent = this._listeners.get(eventName);\n\n        if (!listenersForEvent) {\n            listenersForEvent = new Set();\n            this._listeners.set(eventName, listenersForEvent);\n        }\n\n        listenersForEvent.add(listener);\n\n        this._unprocessedMessages.forEach(args => {\n            if (listener(...args)) {\n                this._unprocessedMessages.delete(args);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @param {string} [eventName] - The name of the event. If this parameter is\n     * not specified all listeners will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this._listeners.delete(eventName);\n        } else {\n            this._listeners.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the listener function from the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeListener(eventName, listener) {\n        const listenersForEvent = this._listeners.get(eventName);\n\n        if (listenersForEvent) {\n            listenersForEvent.delete(listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends the passed event.\n     *\n     * @param {Object} event - The event to be sent.\n     * @returns {void}\n     */\n    sendEvent(event = {}) {\n        if (this._backend) {\n            this._backend.send({\n                type: MESSAGE_TYPE_EVENT,\n                data: event\n            });\n        }\n    }\n\n    /**\n     * Sending request.\n     *\n     * @param {Object} request - The request to be sent.\n     * @returns {Promise}\n     */\n    sendRequest(request) {\n        if (!this._backend) {\n            return Promise.reject(new Error('No transport backend defined!'));\n        }\n\n        this._requestID++;\n\n        const id = this._requestID;\n\n        return new Promise((resolve, reject) => {\n            this._responseHandlers.set(id, ({ error, result }) => {\n                if (typeof result !== 'undefined') {\n                    resolve(result);\n\n                // eslint-disable-next-line no-negated-condition\n                } else if (typeof error !== 'undefined') {\n                    reject(error);\n                } else { // no response\n                    reject(new Error('Unexpected response format!'));\n                }\n            });\n\n            this._backend.send({\n                type: MESSAGE_TYPE_REQUEST,\n                data: request,\n                id\n            });\n        });\n    }\n\n    /**\n     * Changes the current backend transport.\n     *\n     * @param {Object} backend - The new transport backend that will be used.\n     * @returns {void}\n     */\n    setBackend(backend) {\n        this._disposeBackend();\n\n        this._backend = backend;\n        this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/Transport.js","/**\n * The message type for events.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_RESPONSE = 'response';\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/constants.js","// FIXME: change to '../API' when we update to webpack2. If we do this now all\n// files from API modules will be included in external_api.js.\nimport { API_ID } from '../API/constants';\nimport { getJitsiMeetGlobalNS } from '../../react/features/base/util';\n\nimport PostMessageTransportBackend from './PostMessageTransportBackend';\nimport Transport from './Transport';\n\nexport {\n    PostMessageTransportBackend,\n    Transport\n};\n\n/**\n * Option for the default low level transport.\n *\n * @type {Object}\n */\nconst postisOptions = {};\n\nif (typeof API_ID === 'number') {\n    postisOptions.scope = `jitsi_meet_external_api_${API_ID}`;\n}\n\n/**\n * The instance of Transport class that will be used by Jitsi Meet.\n *\n * @type {Transport}\n */\nlet transport;\n\n/**\n * Returns the instance of Transport class that will be used by Jitsi Meet.\n *\n * @returns {Transport}\n */\nexport function getJitsiMeetTransport() {\n    if (!transport) {\n        transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                enableLegacyFormat: true,\n                postisOptions\n            })\n        });\n    }\n\n    return transport;\n}\n\n/**\n * Sets the transport to passed transport.\n *\n * @param {Object} externalTransportBackend - The new transport.\n * @returns {void}\n */\ngetJitsiMeetGlobalNS().setExternalTransportBackend = externalTransportBackend =>\n    transport.setBackend(externalTransportBackend);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/index.js","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * Gets the description of a specific {@code Symbol}.\n *\n * @param {Symbol} symbol - The {@code Symbol} to retrieve the description of.\n * @private\n * @returns {string} The description of {@code symbol}.\n */\nexport function getSymbolDescription(symbol: ?Symbol) {\n    let description = symbol ? symbol.toString() : 'undefined';\n\n    if (description.startsWith('Symbol(') && description.endsWith(')')) {\n        description = description.slice(7, -1);\n    }\n\n    // The polyfill es6-symbol that we use does not appear to comply with the\n    // Symbol standard and, merely, adds @@ at the beginning of the description.\n    if (description.startsWith('@@')) {\n        description = description.slice(2);\n    }\n\n    return description;\n}\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target: Object, source: Object) {\n    const to = Object(target);\n\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n\n    return to;\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e: Object, msg: string = '') {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/helpers.js","/* Copyright @ 2016 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require('./Logger.js');\r\n\r\n/**\r\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\r\n * and thus can be added as global transport in order to capture all the logs.\r\n *\r\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\r\n * a message and stores them in a queue in order to batch log entries. There are\r\n * time and size limit constraints which determine how often batch entries are\r\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\r\n * will use the <tt>logStorage</tt> object given as an argument to save\r\n * the batch log entry.\r\n *\r\n * @param {Object} logStorage an object which allows to store the logs collected\r\n * @param {function(string|object[])} logStorage.storeLogs a method called when\r\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\r\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\r\n * item is an object it means that it's an aggregated message. That is a message\r\n * which is the same as the previous one and it's representation has\r\n * the following format:\r\n * {\r\n *   {string} text: 'the text of some duplicated message'\r\n *   {number} count: 3 // how many times the message appeared in a row\r\n * }\r\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\r\n * the sequence of \"A\". Which means that even if the next message \"C\" is\r\n * the same as \"A\" it will start a new aggregated message \"C\".\r\n * @param {function()} logStorage.isReady a method which should return\r\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\r\n * time storage is not ready log batches will be cached and stored on the next\r\n * occasion (flush or interval timeout).\r\n *\r\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\r\n * @param {number} options.maxEntryLength the size limit for a single log entry\r\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\r\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\r\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\r\n * storage becomes ready. Note that the \"is ready\" condition is checked every\r\n * <tt>options.storeInterval</tt> milliseconds.\r\n * @param {number} options.storeInterval how often the logs should be stored in\r\n * case <tt>maxEntryLength</tt> was not exceeded.\r\n * @param {boolean} options.stringifyObjects indicates whether or not object\r\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\r\n * message is composed. Note that objects logged on the error log level are\r\n * always stringified.\r\n *\r\n * @constructor\r\n */\r\nfunction LogCollector(logStorage, options) {\r\n    this.logStorage = logStorage;\r\n    this.stringifyObjects\r\n        = options && options.stringifyObjects\r\n            ? options.stringifyObjects : false;\r\n    this.storeInterval\r\n        = options && options.storeInterval\r\n            ? options.storeInterval: 30000;\r\n    this.maxEntryLength\r\n        = options && options.maxEntryLength\r\n            ? options.maxEntryLength : 10000;\r\n    // Bind the log method for each level to the corresponding method name\r\n    // in order to implement \"global log transport\" object.\r\n    Object.keys(Logger.levels).forEach(\r\n    function (logLevel) {\r\n        var methodName = Logger.levels[logLevel];\r\n        this[methodName] = function (logLevel) {\r\n            this._log.apply(this, arguments);\r\n        }.bind(this, logLevel);\r\n    }.bind(this));\r\n    /**\r\n     * The ID of store logs interval if one is currently scheduled or\r\n     * <tt>null</tt> otherwise.\r\n     * @type {number|null}\r\n     */\r\n    this.storeLogsIntervalID = null;\r\n    /**\r\n     * The log messages that are to be batched into log entry when\r\n     * {@link LogCollector._flush} method is called.\r\n     * @type {string[]}\r\n     */\r\n    this.queue = [];\r\n    /**\r\n     * The total length of all messages currently stored in the {@link queue}.\r\n     * @type {number}\r\n     */\r\n    this.totalLen = 0;\r\n    /**\r\n     * An array used to temporarily store log batches, before the storage gets\r\n     * ready.\r\n     * @type {string[]}\r\n     */\r\n    this.outputCache = [];\r\n}\r\n\r\n/**\r\n * Method called inside of {@link formatLogMessage} in order to covert an\r\n * <tt>Object</tt> argument to string. The conversion will happen when either\r\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\r\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\r\n * returns \"[object with circular refs?]\" instead of an object if it fails.\r\n *\r\n * @param {object} someObject the <tt>object</tt> to be stringified.\r\n *\r\n * @return {string} the result of <tt>JSON.stringify</tt> or\r\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.stringify = function (someObject) {\r\n    try {\r\n        return JSON.stringify(someObject);\r\n    } catch (error) {\r\n        return \"[object with circular refs?]\";\r\n    }\r\n};\r\n\r\n/**\r\n * Formats log entry for the given logging level and arguments passed to the\r\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\r\n * arguments have to be captured using JS built-in 'arguments' variable.\r\n *\r\n * @param {Logger.levels} logLevel provides the logging level of the message to\r\n * be logged.\r\n *\r\n * @return {string|null} a non-empty string representation of the log entry\r\n * crafted from the log arguments. If the return value is <tt>null</tt> then\r\n * the message wil be discarded by this <tt>LogCollector</tt>.\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.formatLogMessage\r\n= function (logLevel/*, arg1, arg2, arg3... */) {\r\n    var msg = '';\r\n    for (var i = 1, len = arguments.length; i < len; i++) {\r\n        var arg = arguments[i];\r\n        // objects logged on error level are always converted to JSON\r\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\r\n            && typeof arg === 'object') {\r\n            arg = this.stringify(arg);\r\n        }\r\n        msg += arg;\r\n        if (i != len - 1) {\r\n            msg += ' ';\r\n        }\r\n    }\r\n    return msg.length ? msg : null;\r\n};\r\n\r\n/**\r\n * The log method bound to each of the logging levels in order to implement\r\n * \"global log transport\" object.\r\n *\r\n * @private\r\n */\r\nLogCollector.prototype._log = function() {\r\n\r\n    // var logLevel = arguments[0]; first argument is the log level\r\n    var msg = this.formatLogMessage.apply(this, arguments);\r\n    if (msg) {\r\n        // The same as the previous message aggregation logic\r\n        var prevMessage\r\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\r\n        // NOTE that typeof undefined is 'undefined'\r\n        var prevMessageText\r\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\r\n        // Is it the same as the previous one ?\r\n        if (prevMessageText == msg) {\r\n            if (typeof prevMessage === 'object') {\r\n                prevMessage.count += 1;\r\n            } else {\r\n                this.queue[this.queue.length-1] = {\r\n                    text: msg,\r\n                    count: 2\r\n                }\r\n            }\r\n        } else {\r\n            this.queue.push(msg);\r\n            this.totalLen += msg.length;\r\n        }\r\n    }\r\n\r\n    if (this.totalLen >= this.maxEntryLength) {\r\n        this._flush(true /* force */, true /* reschedule */);\r\n    }\r\n};\r\n\r\n/**\r\n * Starts periodical \"store logs\" task which will be triggered at the interval\r\n * specified in the constructor options.\r\n */\r\nLogCollector.prototype.start = function () {\r\n    this._reschedulePublishInterval();\r\n};\r\n\r\n/**\r\n * Reschedules the periodical \"store logs\" task which will store the next batch\r\n * log entry in the storage.\r\n * @private\r\n */\r\nLogCollector.prototype._reschedulePublishInterval = function () {\r\n    if (this.storeLogsIntervalID) {\r\n        window.clearTimeout(this.storeLogsIntervalID);\r\n        this.storeLogsIntervalID = null;\r\n    }\r\n    // It's actually a timeout, because it is rescheduled on every flush\r\n    this.storeLogsIntervalID\r\n        = window.setTimeout(\r\n            this._flush.bind(\r\n                this, false /* do not force */, true /* reschedule */),\r\n            this.storeInterval);\r\n};\r\n\r\n/**\r\n * Call this method to flush the log entry buffer and store it in the log\r\n * storage immediately (given that the storage is ready).\r\n */\r\nLogCollector.prototype.flush = function() {\r\n    this._flush(\r\n        false /* do not force, as it will not be stored anyway */,\r\n        true /* reschedule next update */ )\r\n};\r\n\r\n/**\r\n * Stores the next batch log entry in the log storage.\r\n * @param {boolean} force enforce current logs batch to be stored or cached if\r\n * there is anything to be logged, but the storage is not ready yet. One of\r\n * legitimate reasons to force is when the logs length exceeds size limit which\r\n * could result in truncation.\r\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\r\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\r\n * task cycle.\r\n * @private\r\n */\r\nLogCollector.prototype._flush = function(force, reschedule) {\r\n    // Publish only if there's anything to be logged\r\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\r\n        //FIXME avoid truncating\r\n        // right now we don't care if the message size is \"slightly\" exceeded\r\n        if (this.logStorage.isReady()) {\r\n            // Sends all cached logs\r\n            if (this.outputCache.length) {\r\n                this.outputCache.forEach(\r\n                    function (cachedQueue) {\r\n                        this.logStorage.storeLogs(cachedQueue);\r\n                    }.bind(this)\r\n                );\r\n                // Clear the cache\r\n                this.outputCache = [];\r\n            }\r\n            // Send current batch\r\n            this.logStorage.storeLogs(this.queue);\r\n        } else {\r\n            this.outputCache.push(this.queue);\r\n        }\r\n\r\n        this.queue = [];\r\n        this.totalLen = 0;\r\n    }\r\n\r\n    if (reschedule) {\r\n        this._reschedulePublishInterval();\r\n    }\r\n};\r\n\r\n/**\r\n * Stops the periodical \"store logs\" task and immediately stores any pending\r\n * log entries as a batch.\r\n */\r\nLogCollector.prototype.stop = function() {\r\n    // Flush and stop publishing logs\r\n    this._flush(false /* do not force */, false /* do not reschedule */);\r\n};\r\n\r\nmodule.exports = LogCollector;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/LogCollector.js\n// module id = 8\n// module chunks = 0","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\nexport function doGetJSON(url) {\n    return fetch(url)\n        .then(response => {\n            const jsonify = response.json();\n\n            if (response.ok) {\n                return jsonify;\n            }\n\n            return jsonify\n                .then(result => Promise.reject(result));\n        })\n        .catch(error => {\n            logger.error('Error performing get:', url, error);\n\n            return Promise.reject(error);\n        });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/httpUtils.js","function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/postis/src/index.js\n// module id = 10\n// module chunks = 0","module.exports = {\"google-auth\":{\"matchPatterns\":{\"url\":\"accounts.google.com\"},\"target\":\"electron\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/API/external/electronPopupsConfig.json\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}